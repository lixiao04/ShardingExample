
# 配置水平分表随着日期每月递增的逻辑表名，配置后不走分片建，全局查询时能够自动获取最新的逻辑表分片，多个通过逗号分隔
dynamic.table.names=t_order

# 配置Sharding-JDBC的分片策略
# 配置数据源，给数据源起名o1,02...此处可配置多数据源
spring.shardingsphere.datasource.names=o
#spring.shardingsphere.datasource.names=o1,o2

# 配置数据源具体内容――――――――包含  连接池，  驱动，             地址，   用户名，    密码
spring.shardingsphere.datasource.o.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.o.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.o.url=jdbc:mysql://localhost:3306/order_db?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
spring.shardingsphere.datasource.o.username=root
spring.shardingsphere.datasource.o.password=root


#spring.shardingsphere.datasource.o1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.o1.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.o1.url=jdbc:mysql://localhost:3306/order_db_1?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.o1.username=root
#spring.shardingsphere.datasource.o1.password=root
#
#
#spring.shardingsphere.datasource.o2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.o2.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.o2.url=jdbc:mysql://localhost:3306/order_db_2?characterEncoding=utf-8&useUnicode=true&useSSL=false&serverTimezone=UTC
#spring.shardingsphere.datasource.o2.username=root
#spring.shardingsphere.datasource.o2.password=root

# 配置表的分布，表的策略
#单数据库时配置
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=o.t_order_$->{202106..202107}
#多数据库时配置
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=o${1..2}.t_order_$->{1..2}
#动态生成分表时的配置
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=o.t_order



# 指定t_order表 主键id 生成策略为 SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 指定表的分片策略 约定id值是偶数添加到t_order_1表，如果id是奇数添加到t_order_2表
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2 + 1}


# 自定义策略时 如按照月份生成不同的分表
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column= create_time
#自定义实现的精准分片算法类 ，支持=和in两种模式的精确分片
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.mysqldepart.sharding.shardingdemo.utils.PreciseTableShardingAlgorithm
#可选的范围分片策略，也是自定义实现范围分片算法，可搭配精准分片使用，当使用between and时，采用范围分片策略
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name=com.mysqldepart.sharding.shardingdemo.utils.RangeTableShardingAlgorithm
# 指定数据库分片策略 约定user_id值是偶数添加到order_db_1中，奇数添加到order_db_2中
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=o$->{user_id % 2 + 1}



# 打开sql输出日志
spring.shardingsphere.props.sql.show=true

spring.main.allow-bean-definition-overriding=true

mybatis-plus.mapper-locations= classpath*:com/mysqldepart/sharding/**/xml/*Mapper.xml


#redis 配置
#spring.redis.database= 0
#spring.redis.lettuce.shutdown-timeout= 100ms


spring.redis.host=127.0.0.1
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=
#连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
#连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
#连接池中的最大空闲连接
spring.redis.pool.max-idle=8
#连接池中的最小空闲连接
spring.redis.pool.min-idle=0
#连接超时时间（毫秒）
spring.redis.timeout=30000
